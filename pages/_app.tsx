import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import NextNProgress from 'nextjs-progressbar'
import  Head  from 'next/head'
import {useEffect} from "react"
import { supabase } from '@/config/supabase'
import {userReducer } from "@/store"
import { ID, User } from '@/static/types'
import {get_user_profile} from "@/services/db/users"
import {get_workspaces} from "@/services/db/workspace"
import Loading from "@/components/shared/Loading"
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';





export default function App({ Component, pageProps }: AppProps) {

  //getting the reducer from thr store
  const setUser = userReducer(state => state.setUser)

  supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {
      // delete cookies on sign out
      const expires = new Date(0).toUTCString()
      document.cookie = `abdullah-access-token=; path=/; expires=${expires}; SameSite=Lax; secure`
      document.cookie = `abdullah-access-token=; path=/; expires=${expires}; SameSite=Lax; secure`
    } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
      const maxAge = 100 * 365 * 24 * 60 * 60 // 100 years, never expires
      if(session){
      document.cookie = `abdullah-access-token=${session.access_token}; path=/; max-age=${maxAge}; SameSite=Lax; secure`
      document.cookie = `abdullah-refresh-token=${session.refresh_token}; path=/; max-age=${maxAge}; SameSite=Lax; secure`
      }
    }
  })

 useEffect(() => {
  const user_credentials = async () => {
    //check if we have a user
 
   const response = await  supabase.auth.getSession().catch(error => console.error(error))
    if(response){
      const profile = await get_user_profile(response.data.session?.user.id as ID) 
      const workspaces = await get_workspaces(response.data.session?.user.id as ID)
      console.log(workspaces)
      if(profile && workspaces) {
        const current_user :User ={ 
          id: response.data.session?.user.id as ID,
          email:  response.data.session?.user.email as string ,
          photo_url:profile[0]?.photo_url,
          name:profile[0]?.first_name,
          last_name:profile[0]?.last_name,
          workspaces
        }
        setUser(current_user )
      
      }else {
        // handle error display
        console.log("continue the sign up process")
      }
      
      
   
    }else{
      console.log("there is an error in the _app.ts file")
    }

  }
  user_credentials().then(()=>{
    console.log("every thing went good")
  })
  },[setUser ])
//get the icon from here
//https://icons8.com/icon/1317/sail-boat
  return(
    <>
     <Head>
        <title>OpenFlow</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      
       <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
       
        <link rel="manifest" href="/site.webmanifest" />
        <script src="//code.tidio.co/f4ntqdkrkcmkov2pbgapiuevig4fhtbq.js" async></script>
      </Head>
      <Loading />
      <ToastContainer theme="dark" />
      
    <NextNProgress options={{ showSpinner: false }} />
    
    <Component {...pageProps} />
    </>
  )
}
